<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-21T11:54:30-03:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">Valentin Sanjuan</title><subtitle>Programming &amp; Computers</subtitle><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><entry><title type="html">Intro to Ruby Pattern Matching</title><link href="http://localhost:4000/ruby/pattern-matching/intro-to-ruby-pattern-matching/" rel="alternate" type="text/html" title="Intro to Ruby Pattern Matching" /><published>2023-03-05T02:03:34-03:00</published><updated>2023-03-05T02:03:34-03:00</updated><id>http://localhost:4000/ruby/pattern-matching/intro-to-ruby-pattern-matching</id><content type="html" xml:base="http://localhost:4000/ruby/pattern-matching/intro-to-ruby-pattern-matching/"><![CDATA[<p>Pattern matching is a feature first introduced in Ruby 2.7 that since Ruby 3 it’s no longer experimental.
Pattern matching allows you to match a value against a pattern or structure (could be primitives, a Ruby object or a Struct) and binding those matched values to local variables.</p>

<p>In other words, it offers a way to simplify complex conditional statements by using a declarative syntax that is easier to read and reason about.</p>

<p>Pattern Matching is implemented by using the case/in expression:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">case</span> <span class="o">&lt;</span><span class="n">expression</span><span class="o">&gt;</span>
<span class="k">in</span> <span class="o">&lt;</span><span class="n">pattern1</span><span class="o">&gt;</span>
  <span class="o">...</span>
<span class="k">in</span> <span class="o">&lt;</span><span class="n">pattern2</span><span class="o">&gt;</span>
  <span class="o">...</span>
<span class="k">in</span> <span class="o">&lt;</span><span class="n">pattern3</span><span class="o">&gt;</span>
  <span class="o">...</span>
<span class="k">else</span>
  <span class="o">...</span>
<span class="k">end</span></code></pre></figure>

<p>So as an example, let’s use a communication with a 3rd party system that will return</p>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="ruby" /><category term="pattern-matching" /><summary type="html"><![CDATA[Pattern matching is a feature first introduced in Ruby 2.7 that since Ruby 3 it’s no longer experimental. Pattern matching allows you to match a value against a pattern or structure (could be primitives, a Ruby object or a Struct) and binding those matched values to local variables.]]></summary></entry><entry><title type="html">Immutable Objects</title><link href="http://localhost:4000/jekyll/update/immutable-objects/" rel="alternate" type="text/html" title="Immutable Objects" /><published>2023-03-05T02:03:34-03:00</published><updated>2023-03-05T02:03:34-03:00</updated><id>http://localhost:4000/jekyll/update/immutable-objects</id><content type="html" xml:base="http://localhost:4000/jekyll/update/immutable-objects/"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">The Query Object Pattern</title><link href="http://localhost:4000/jekyll/update/the-query-object-pattern/" rel="alternate" type="text/html" title="The Query Object Pattern" /><published>2023-03-05T02:03:34-03:00</published><updated>2023-03-05T02:03:34-03:00</updated><id>http://localhost:4000/jekyll/update/the-query-object-pattern</id><content type="html" xml:base="http://localhost:4000/jekyll/update/the-query-object-pattern/"><![CDATA[<p>Suppose that we have the following code:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Order</span>
  <span class="n">has_many</span> <span class="ss">:shipments</span>
  <span class="n">has_many</span> <span class="ss">:inventory_units</span><span class="p">,</span> <span class="ss">through: :shipments</span>
<span class="k">end</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Shipment</span>
  <span class="n">belongs_to</span> <span class="ss">:order</span>
  <span class="n">has_many</span> <span class="ss">:inventory_units</span>
<span class="k">end</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">InventoryUnit</span>
  <span class="n">belongs_to</span> <span class="ss">:shipment</span>
<span class="k">end</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">ComplianceValidator</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
    <span class="vi">@order</span> <span class="o">=</span> <span class="n">order</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">call</span>
    <span class="n">monthly_items_count</span> <span class="o">=</span> 
      <span class="no">Order</span>
        <span class="p">.</span><span class="nf">joins</span><span class="p">(</span><span class="ss">:inventory_units</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">completed</span>
        <span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="ss">email: </span><span class="vi">@order</span><span class="p">.</span><span class="nf">email</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="ss">created_at: </span><span class="no">Date</span><span class="p">.</span><span class="nf">today</span><span class="p">.</span><span class="nf">all_month</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="ss">:inventory_units</span><span class="p">)</span>

    <span class="n">yearly_items_count</span> <span class="o">=</span> 
      <span class="no">Order</span>
        <span class="p">.</span><span class="nf">joins</span><span class="p">(</span><span class="ss">:inventory_units</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">completed</span>
        <span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="ss">email: </span><span class="vi">@order</span><span class="p">.</span><span class="nf">email</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">where</span><span class="p">(</span><span class="ss">created_at: </span><span class="no">Date</span><span class="p">.</span><span class="nf">today</span><span class="p">.</span><span class="nf">all_year</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="ss">:inventory_units</span><span class="p">)</span>

    <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">monthly_items_count</span> <span class="o">&gt;</span> <span class="mi">10</span>
    <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="n">yearly_items_count</span> <span class="o">&gt;</span> <span class="mi">50</span>
    <span class="kp">true</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>Let’s say that we want to test this logic (i’m using rspec and factory_girl here, factories not included in the example)</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">describe</span> <span class="no">ComplianceValidator</span> <span class="k">do</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:order</span><span class="p">)</span> <span class="p">{</span> <span class="n">create</span><span class="p">(</span><span class="ss">:completed_order</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:shipments</span><span class="p">)</span> <span class="p">{</span> <span class="n">create_list</span><span class="p">(</span><span class="ss">:shipment</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">order: </span><span class="n">order</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:inventory_units</span><span class="p">)</span> <span class="p">{</span> <span class="n">create_list</span><span class="p">(</span><span class="ss">:inventory_units</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">shipment: </span><span class="n">shipment</span><span class="p">)</span> <span class="p">}</span>

  <span class="n">subject</span> <span class="p">{</span> <span class="no">ComplianceValidator</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">order</span><span class="p">).</span><span class="nf">call</span> <span class="p">}</span>

  <span class="n">it</span> <span class="s1">'should return false when same email purchased more than 10 bottles in a month'</span> <span class="k">do</span>
    
  <span class="k">end</span>

  <span class="n">it</span> <span class="s1">'should return false when same email purchased more than 10 bottles in a month'</span> <span class="k">do</span>
  <span class="k">end</span>

  <span class="n">it</span> <span class="s1">'should return false when same email purchased more than 10 bottles in a month'</span> <span class="k">do</span>
  <span class="k">end</span>

<span class="k">end</span></code></pre></figure>]]></content><author><name>{&quot;name&quot;=&gt;nil, &quot;picture&quot;=&gt;nil, &quot;email&quot;=&gt;nil, &quot;twitter&quot;=&gt;nil, &quot;links&quot;=&gt;[{&quot;title&quot;=&gt;nil, &quot;url&quot;=&gt;nil, &quot;icon&quot;=&gt;nil}]}</name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Suppose that we have the following code:]]></summary></entry></feed>